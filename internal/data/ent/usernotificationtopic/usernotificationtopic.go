// Code generated by ent, DO NOT EDIT.

package usernotificationtopic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the usernotificationtopic type in the database.
	Label = "user_notification_topic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldNotificationTopicID holds the string denoting the notification_topic_id field in the database.
	FieldNotificationTopicID = "notification_topic_id"
	// FieldSubscribedAt holds the string denoting the subscribed_at field in the database.
	FieldSubscribedAt = "subscribed_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeNotificationTopic holds the string denoting the notification_topic edge name in mutations.
	EdgeNotificationTopic = "notification_topic"
	// Table holds the table name of the usernotificationtopic in the database.
	Table = "user_notification_topic"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_notification_topic"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// NotificationTopicTable is the table that holds the notification_topic relation/edge.
	NotificationTopicTable = "user_notification_topic"
	// NotificationTopicInverseTable is the table name for the NotificationTopic entity.
	// It exists in this package in order to avoid circular dependency with the "notificationtopic" package.
	NotificationTopicInverseTable = "notification_topic"
	// NotificationTopicColumn is the table column denoting the notification_topic relation/edge.
	NotificationTopicColumn = "notification_topic_id"
)

// Columns holds all SQL columns for usernotificationtopic fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldNotificationTopicID,
	FieldSubscribedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSubscribedAt holds the default value on creation for the "subscribed_at" field.
	DefaultSubscribedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the UserNotificationTopic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByNotificationTopicID orders the results by the notification_topic_id field.
func ByNotificationTopicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationTopicID, opts...).ToFunc()
}

// BySubscribedAt orders the results by the subscribed_at field.
func BySubscribedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationTopicField orders the results by notification_topic field.
func ByNotificationTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationTopicStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newNotificationTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationTopicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotificationTopicTable, NotificationTopicColumn),
	)
}
