// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-firebase/internal/data/ent/devicetoken"
	"go-firebase/internal/data/ent/notification"
	"go-firebase/internal/data/ent/predicate"
	"go-firebase/internal/data/ent/user"
	"go-firebase/internal/data/ent/usernotificationtopic"
	"go-firebase/internal/data/ent/userpermission"
	"go-firebase/internal/data/ent/userrole"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdate) ClearFirstName() *UserUpdate {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdate) SetLastName(v string) *UserUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastName(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserUpdate) ClearLastName() *UserUpdate {
	_u.mutation.ClearLastName()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *UserUpdate) SetDisplayName(v string) *UserUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDisplayName(v *string) *UserUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *UserUpdate) ClearDisplayName() *UserUpdate {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetFirebaseUID sets the "firebase_uid" field.
func (_u *UserUpdate) SetFirebaseUID(v string) *UserUpdate {
	_u.mutation.SetFirebaseUID(v)
	return _u
}

// SetNillableFirebaseUID sets the "firebase_uid" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirebaseUID(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirebaseUID(*v)
	}
	return _u
}

// AddDeviceTokenIDs adds the "device_tokens" edge to the DeviceToken entity by IDs.
func (_u *UserUpdate) AddDeviceTokenIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddDeviceTokenIDs(ids...)
	return _u
}

// AddDeviceTokens adds the "device_tokens" edges to the DeviceToken entity.
func (_u *UserUpdate) AddDeviceTokens(v ...*DeviceToken) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeviceTokenIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_u *UserUpdate) AddNotificationIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddNotificationIDs(ids...)
	return _u
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_u *UserUpdate) AddNotifications(v ...*Notification) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNotificationIDs(ids...)
}

// AddUserNotificationTopicIDs adds the "user_notification_topics" edge to the UserNotificationTopic entity by IDs.
func (_u *UserUpdate) AddUserNotificationTopicIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddUserNotificationTopicIDs(ids...)
	return _u
}

// AddUserNotificationTopics adds the "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *UserUpdate) AddUserNotificationTopics(v ...*UserNotificationTopic) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserNotificationTopicIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (_u *UserUpdate) AddUserRoleIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddUserRoleIDs(ids...)
	return _u
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (_u *UserUpdate) AddUserRoles(v ...*UserRole) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserRoleIDs(ids...)
}

// AddUserPermissionIDs adds the "user_permissions" edge to the UserPermission entity by IDs.
func (_u *UserUpdate) AddUserPermissionIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddUserPermissionIDs(ids...)
	return _u
}

// AddUserPermissions adds the "user_permissions" edges to the UserPermission entity.
func (_u *UserUpdate) AddUserPermissions(v ...*UserPermission) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserPermissionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearDeviceTokens clears all "device_tokens" edges to the DeviceToken entity.
func (_u *UserUpdate) ClearDeviceTokens() *UserUpdate {
	_u.mutation.ClearDeviceTokens()
	return _u
}

// RemoveDeviceTokenIDs removes the "device_tokens" edge to DeviceToken entities by IDs.
func (_u *UserUpdate) RemoveDeviceTokenIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveDeviceTokenIDs(ids...)
	return _u
}

// RemoveDeviceTokens removes "device_tokens" edges to DeviceToken entities.
func (_u *UserUpdate) RemoveDeviceTokens(v ...*DeviceToken) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeviceTokenIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (_u *UserUpdate) ClearNotifications() *UserUpdate {
	_u.mutation.ClearNotifications()
	return _u
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (_u *UserUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveNotificationIDs(ids...)
	return _u
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (_u *UserUpdate) RemoveNotifications(v ...*Notification) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNotificationIDs(ids...)
}

// ClearUserNotificationTopics clears all "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *UserUpdate) ClearUserNotificationTopics() *UserUpdate {
	_u.mutation.ClearUserNotificationTopics()
	return _u
}

// RemoveUserNotificationTopicIDs removes the "user_notification_topics" edge to UserNotificationTopic entities by IDs.
func (_u *UserUpdate) RemoveUserNotificationTopicIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveUserNotificationTopicIDs(ids...)
	return _u
}

// RemoveUserNotificationTopics removes "user_notification_topics" edges to UserNotificationTopic entities.
func (_u *UserUpdate) RemoveUserNotificationTopics(v ...*UserNotificationTopic) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserNotificationTopicIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (_u *UserUpdate) ClearUserRoles() *UserUpdate {
	_u.mutation.ClearUserRoles()
	return _u
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (_u *UserUpdate) RemoveUserRoleIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveUserRoleIDs(ids...)
	return _u
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (_u *UserUpdate) RemoveUserRoles(v ...*UserRole) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserRoleIDs(ids...)
}

// ClearUserPermissions clears all "user_permissions" edges to the UserPermission entity.
func (_u *UserUpdate) ClearUserPermissions() *UserUpdate {
	_u.mutation.ClearUserPermissions()
	return _u
}

// RemoveUserPermissionIDs removes the "user_permissions" edge to UserPermission entities by IDs.
func (_u *UserUpdate) RemoveUserPermissionIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveUserPermissionIDs(ids...)
	return _u
}

// RemoveUserPermissions removes "user_permissions" edges to UserPermission entities.
func (_u *UserUpdate) RemoveUserPermissions(v ...*UserPermission) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserPermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.FirebaseUID(); ok {
		_spec.SetField(user.FieldFirebaseUID, field.TypeString, value)
	}
	if _u.mutation.DeviceTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTokensTable,
			Columns: []string{user.DeviceTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDeviceTokensIDs(); len(nodes) > 0 && !_u.mutation.DeviceTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTokensTable,
			Columns: []string{user.DeviceTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeviceTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTokensTable,
			Columns: []string{user.DeviceTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !_u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserNotificationTopicsTable,
			Columns: []string{user.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserNotificationTopicsIDs(); len(nodes) > 0 && !_u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserNotificationTopicsTable,
			Columns: []string{user.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserNotificationTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserNotificationTopicsTable,
			Columns: []string{user.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !_u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserPermissionsIDs(); len(nodes) > 0 && !_u.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdateOne) SetLastName(v string) *UserUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserUpdateOne) ClearLastName() *UserUpdateOne {
	_u.mutation.ClearLastName()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *UserUpdateOne) SetDisplayName(v string) *UserUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDisplayName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *UserUpdateOne) ClearDisplayName() *UserUpdateOne {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetFirebaseUID sets the "firebase_uid" field.
func (_u *UserUpdateOne) SetFirebaseUID(v string) *UserUpdateOne {
	_u.mutation.SetFirebaseUID(v)
	return _u
}

// SetNillableFirebaseUID sets the "firebase_uid" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirebaseUID(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirebaseUID(*v)
	}
	return _u
}

// AddDeviceTokenIDs adds the "device_tokens" edge to the DeviceToken entity by IDs.
func (_u *UserUpdateOne) AddDeviceTokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddDeviceTokenIDs(ids...)
	return _u
}

// AddDeviceTokens adds the "device_tokens" edges to the DeviceToken entity.
func (_u *UserUpdateOne) AddDeviceTokens(v ...*DeviceToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeviceTokenIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_u *UserUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddNotificationIDs(ids...)
	return _u
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_u *UserUpdateOne) AddNotifications(v ...*Notification) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNotificationIDs(ids...)
}

// AddUserNotificationTopicIDs adds the "user_notification_topics" edge to the UserNotificationTopic entity by IDs.
func (_u *UserUpdateOne) AddUserNotificationTopicIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddUserNotificationTopicIDs(ids...)
	return _u
}

// AddUserNotificationTopics adds the "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *UserUpdateOne) AddUserNotificationTopics(v ...*UserNotificationTopic) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserNotificationTopicIDs(ids...)
}

// AddUserRoleIDs adds the "user_roles" edge to the UserRole entity by IDs.
func (_u *UserUpdateOne) AddUserRoleIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddUserRoleIDs(ids...)
	return _u
}

// AddUserRoles adds the "user_roles" edges to the UserRole entity.
func (_u *UserUpdateOne) AddUserRoles(v ...*UserRole) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserRoleIDs(ids...)
}

// AddUserPermissionIDs adds the "user_permissions" edge to the UserPermission entity by IDs.
func (_u *UserUpdateOne) AddUserPermissionIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddUserPermissionIDs(ids...)
	return _u
}

// AddUserPermissions adds the "user_permissions" edges to the UserPermission entity.
func (_u *UserUpdateOne) AddUserPermissions(v ...*UserPermission) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserPermissionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearDeviceTokens clears all "device_tokens" edges to the DeviceToken entity.
func (_u *UserUpdateOne) ClearDeviceTokens() *UserUpdateOne {
	_u.mutation.ClearDeviceTokens()
	return _u
}

// RemoveDeviceTokenIDs removes the "device_tokens" edge to DeviceToken entities by IDs.
func (_u *UserUpdateOne) RemoveDeviceTokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveDeviceTokenIDs(ids...)
	return _u
}

// RemoveDeviceTokens removes "device_tokens" edges to DeviceToken entities.
func (_u *UserUpdateOne) RemoveDeviceTokens(v ...*DeviceToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeviceTokenIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (_u *UserUpdateOne) ClearNotifications() *UserUpdateOne {
	_u.mutation.ClearNotifications()
	return _u
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (_u *UserUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveNotificationIDs(ids...)
	return _u
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (_u *UserUpdateOne) RemoveNotifications(v ...*Notification) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNotificationIDs(ids...)
}

// ClearUserNotificationTopics clears all "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *UserUpdateOne) ClearUserNotificationTopics() *UserUpdateOne {
	_u.mutation.ClearUserNotificationTopics()
	return _u
}

// RemoveUserNotificationTopicIDs removes the "user_notification_topics" edge to UserNotificationTopic entities by IDs.
func (_u *UserUpdateOne) RemoveUserNotificationTopicIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveUserNotificationTopicIDs(ids...)
	return _u
}

// RemoveUserNotificationTopics removes "user_notification_topics" edges to UserNotificationTopic entities.
func (_u *UserUpdateOne) RemoveUserNotificationTopics(v ...*UserNotificationTopic) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserNotificationTopicIDs(ids...)
}

// ClearUserRoles clears all "user_roles" edges to the UserRole entity.
func (_u *UserUpdateOne) ClearUserRoles() *UserUpdateOne {
	_u.mutation.ClearUserRoles()
	return _u
}

// RemoveUserRoleIDs removes the "user_roles" edge to UserRole entities by IDs.
func (_u *UserUpdateOne) RemoveUserRoleIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveUserRoleIDs(ids...)
	return _u
}

// RemoveUserRoles removes "user_roles" edges to UserRole entities.
func (_u *UserUpdateOne) RemoveUserRoles(v ...*UserRole) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserRoleIDs(ids...)
}

// ClearUserPermissions clears all "user_permissions" edges to the UserPermission entity.
func (_u *UserUpdateOne) ClearUserPermissions() *UserUpdateOne {
	_u.mutation.ClearUserPermissions()
	return _u
}

// RemoveUserPermissionIDs removes the "user_permissions" edge to UserPermission entities by IDs.
func (_u *UserUpdateOne) RemoveUserPermissionIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveUserPermissionIDs(ids...)
	return _u
}

// RemoveUserPermissions removes "user_permissions" edges to UserPermission entities.
func (_u *UserUpdateOne) RemoveUserPermissions(v ...*UserPermission) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserPermissionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.FirebaseUID(); ok {
		_spec.SetField(user.FieldFirebaseUID, field.TypeString, value)
	}
	if _u.mutation.DeviceTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTokensTable,
			Columns: []string{user.DeviceTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDeviceTokensIDs(); len(nodes) > 0 && !_u.mutation.DeviceTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTokensTable,
			Columns: []string{user.DeviceTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeviceTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DeviceTokensTable,
			Columns: []string{user.DeviceTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(devicetoken.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !_u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: []string{user.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserNotificationTopicsTable,
			Columns: []string{user.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserNotificationTopicsIDs(); len(nodes) > 0 && !_u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserNotificationTopicsTable,
			Columns: []string{user.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserNotificationTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserNotificationTopicsTable,
			Columns: []string{user.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserRolesIDs(); len(nodes) > 0 && !_u.mutation.UserRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRolesTable,
			Columns: []string{user.UserRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserPermissionsIDs(); len(nodes) > 0 && !_u.mutation.UserPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserPermissionsTable,
			Columns: []string{user.UserPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userpermission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
