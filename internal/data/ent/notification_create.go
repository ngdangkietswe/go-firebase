// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-firebase/internal/data/ent/notification"
	"go-firebase/internal/data/ent/notificationtopic"
	"go-firebase/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NotificationCreate is the builder for creating a Notification entity.
type NotificationCreate struct {
	config
	mutation *NotificationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationCreate) SetCreatedAt(v time.Time) *NotificationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableCreatedAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotificationCreate) SetUpdatedAt(v time.Time) *NotificationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableUpdatedAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *NotificationCreate) SetUserID(v uuid.UUID) *NotificationCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableUserID(v *uuid.UUID) *NotificationCreate {
	if v != nil {
		_c.SetUserID(*v)
	}
	return _c
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (_c *NotificationCreate) SetNotificationTopicID(v uuid.UUID) *NotificationCreate {
	_c.mutation.SetNotificationTopicID(v)
	return _c
}

// SetNillableNotificationTopicID sets the "notification_topic_id" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableNotificationTopicID(v *uuid.UUID) *NotificationCreate {
	if v != nil {
		_c.SetNotificationTopicID(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *NotificationCreate) SetTitle(v string) *NotificationCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetBody sets the "body" field.
func (_c *NotificationCreate) SetBody(v string) *NotificationCreate {
	_c.mutation.SetBody(v)
	return _c
}

// SetData sets the "data" field.
func (_c *NotificationCreate) SetData(v map[string]string) *NotificationCreate {
	_c.mutation.SetData(v)
	return _c
}

// SetSentAt sets the "sent_at" field.
func (_c *NotificationCreate) SetSentAt(v time.Time) *NotificationCreate {
	_c.mutation.SetSentAt(v)
	return _c
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableSentAt(v *time.Time) *NotificationCreate {
	if v != nil {
		_c.SetSentAt(*v)
	}
	return _c
}

// SetIsRead sets the "is_read" field.
func (_c *NotificationCreate) SetIsRead(v bool) *NotificationCreate {
	_c.mutation.SetIsRead(v)
	return _c
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableIsRead(v *bool) *NotificationCreate {
	if v != nil {
		_c.SetIsRead(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationCreate) SetID(v uuid.UUID) *NotificationCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *NotificationCreate) SetNillableID(v *uuid.UUID) *NotificationCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *NotificationCreate) SetUser(v *User) *NotificationCreate {
	return _c.SetUserID(v.ID)
}

// SetNotificationTopic sets the "notification_topic" edge to the NotificationTopic entity.
func (_c *NotificationCreate) SetNotificationTopic(v *NotificationTopic) *NotificationCreate {
	return _c.SetNotificationTopicID(v.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (_c *NotificationCreate) Mutation() *NotificationMutation {
	return _c.mutation
}

// Save creates the Notification in the database.
func (_c *NotificationCreate) Save(ctx context.Context) (*Notification, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationCreate) SaveX(ctx context.Context) *Notification {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotificationCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := notification.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := notification.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.SentAt(); !ok {
		v := notification.DefaultSentAt()
		_c.mutation.SetSentAt(v)
	}
	if _, ok := _c.mutation.IsRead(); !ok {
		v := notification.DefaultIsRead
		_c.mutation.SetIsRead(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := notification.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Notification.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Notification.updated_at"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Notification.title"`)}
	}
	if _, ok := _c.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Notification.body"`)}
	}
	if _, ok := _c.mutation.SentAt(); !ok {
		return &ValidationError{Name: "sent_at", err: errors.New(`ent: missing required field "Notification.sent_at"`)}
	}
	if _, ok := _c.mutation.IsRead(); !ok {
		return &ValidationError{Name: "is_read", err: errors.New(`ent: missing required field "Notification.is_read"`)}
	}
	return nil
}

func (_c *NotificationCreate) sqlSave(ctx context.Context) (*Notification, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationCreate) createSpec() (*Notification, *sqlgraph.CreateSpec) {
	var (
		_node = &Notification{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notification.Table, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Body(); ok {
		_spec.SetField(notification.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := _c.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := _c.mutation.SentAt(); ok {
		_spec.SetField(notification.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := _c.mutation.IsRead(); ok {
		_spec.SetField(notification.FieldIsRead, field.TypeBool, value)
		_node.IsRead = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NotificationTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationTopicTable,
			Columns: []string{notification.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NotificationTopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notification.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationCreate) OnConflict(opts ...sql.ConflictOption) *NotificationUpsertOne {
	_c.conflict = opts
	return &NotificationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationCreate) OnConflictColumns(columns ...string) *NotificationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationUpsertOne{
		create: _c,
	}
}

type (
	// NotificationUpsertOne is the builder for "upsert"-ing
	//  one Notification node.
	NotificationUpsertOne struct {
		create *NotificationCreate
	}

	// NotificationUpsert is the "OnConflict" setter.
	NotificationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsert) SetUpdatedAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateUpdatedAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *NotificationUpsert) SetUserID(v uuid.UUID) *NotificationUpsert {
	u.Set(notification.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateUserID() *NotificationUpsert {
	u.SetExcluded(notification.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotificationUpsert) ClearUserID() *NotificationUpsert {
	u.SetNull(notification.FieldUserID)
	return u
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (u *NotificationUpsert) SetNotificationTopicID(v uuid.UUID) *NotificationUpsert {
	u.Set(notification.FieldNotificationTopicID, v)
	return u
}

// UpdateNotificationTopicID sets the "notification_topic_id" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateNotificationTopicID() *NotificationUpsert {
	u.SetExcluded(notification.FieldNotificationTopicID)
	return u
}

// ClearNotificationTopicID clears the value of the "notification_topic_id" field.
func (u *NotificationUpsert) ClearNotificationTopicID() *NotificationUpsert {
	u.SetNull(notification.FieldNotificationTopicID)
	return u
}

// SetTitle sets the "title" field.
func (u *NotificationUpsert) SetTitle(v string) *NotificationUpsert {
	u.Set(notification.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateTitle() *NotificationUpsert {
	u.SetExcluded(notification.FieldTitle)
	return u
}

// SetBody sets the "body" field.
func (u *NotificationUpsert) SetBody(v string) *NotificationUpsert {
	u.Set(notification.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateBody() *NotificationUpsert {
	u.SetExcluded(notification.FieldBody)
	return u
}

// SetData sets the "data" field.
func (u *NotificationUpsert) SetData(v map[string]string) *NotificationUpsert {
	u.Set(notification.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateData() *NotificationUpsert {
	u.SetExcluded(notification.FieldData)
	return u
}

// ClearData clears the value of the "data" field.
func (u *NotificationUpsert) ClearData() *NotificationUpsert {
	u.SetNull(notification.FieldData)
	return u
}

// SetSentAt sets the "sent_at" field.
func (u *NotificationUpsert) SetSentAt(v time.Time) *NotificationUpsert {
	u.Set(notification.FieldSentAt, v)
	return u
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateSentAt() *NotificationUpsert {
	u.SetExcluded(notification.FieldSentAt)
	return u
}

// SetIsRead sets the "is_read" field.
func (u *NotificationUpsert) SetIsRead(v bool) *NotificationUpsert {
	u.Set(notification.FieldIsRead, v)
	return u
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *NotificationUpsert) UpdateIsRead() *NotificationUpsert {
	u.SetExcluded(notification.FieldIsRead)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationUpsertOne) UpdateNewValues() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notification.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notification.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationUpsertOne) Ignore() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationUpsertOne) DoNothing() *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationCreate.OnConflict
// documentation for more info.
func (u *NotificationUpsertOne) Update(set func(*NotificationUpsert)) *NotificationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsertOne) SetUpdatedAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateUpdatedAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotificationUpsertOne) SetUserID(v uuid.UUID) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateUserID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotificationUpsertOne) ClearUserID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearUserID()
	})
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (u *NotificationUpsertOne) SetNotificationTopicID(v uuid.UUID) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetNotificationTopicID(v)
	})
}

// UpdateNotificationTopicID sets the "notification_topic_id" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateNotificationTopicID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateNotificationTopicID()
	})
}

// ClearNotificationTopicID clears the value of the "notification_topic_id" field.
func (u *NotificationUpsertOne) ClearNotificationTopicID() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearNotificationTopicID()
	})
}

// SetTitle sets the "title" field.
func (u *NotificationUpsertOne) SetTitle(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateTitle() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *NotificationUpsertOne) SetBody(v string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateBody() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateBody()
	})
}

// SetData sets the "data" field.
func (u *NotificationUpsertOne) SetData(v map[string]string) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateData() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *NotificationUpsertOne) ClearData() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearData()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *NotificationUpsertOne) SetSentAt(v time.Time) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateSentAt() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateSentAt()
	})
}

// SetIsRead sets the "is_read" field.
func (u *NotificationUpsertOne) SetIsRead(v bool) *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.SetIsRead(v)
	})
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *NotificationUpsertOne) UpdateIsRead() *NotificationUpsertOne {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateIsRead()
	})
}

// Exec executes the query.
func (u *NotificationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NotificationUpsertOne.ID is not supported by MySQL driver. Use NotificationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationCreateBulk is the builder for creating many Notification entities in bulk.
type NotificationCreateBulk struct {
	config
	err      error
	builders []*NotificationCreate
	conflict []sql.ConflictOption
}

// Save creates the Notification entities in the database.
func (_c *NotificationCreateBulk) Save(ctx context.Context) ([]*Notification, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Notification, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationCreateBulk) SaveX(ctx context.Context) []*Notification {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Notification.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationUpsertBulk {
	_c.conflict = opts
	return &NotificationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationCreateBulk) OnConflictColumns(columns ...string) *NotificationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationUpsertBulk{
		create: _c,
	}
}

// NotificationUpsertBulk is the builder for "upsert"-ing
// a bulk of Notification nodes.
type NotificationUpsertBulk struct {
	create *NotificationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notification.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationUpsertBulk) UpdateNewValues() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notification.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notification.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Notification.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationUpsertBulk) Ignore() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationUpsertBulk) DoNothing() *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationUpsertBulk) Update(set func(*NotificationUpsert)) *NotificationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationUpsertBulk) SetUpdatedAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateUpdatedAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *NotificationUpsertBulk) SetUserID(v uuid.UUID) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateUserID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *NotificationUpsertBulk) ClearUserID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearUserID()
	})
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (u *NotificationUpsertBulk) SetNotificationTopicID(v uuid.UUID) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetNotificationTopicID(v)
	})
}

// UpdateNotificationTopicID sets the "notification_topic_id" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateNotificationTopicID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateNotificationTopicID()
	})
}

// ClearNotificationTopicID clears the value of the "notification_topic_id" field.
func (u *NotificationUpsertBulk) ClearNotificationTopicID() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearNotificationTopicID()
	})
}

// SetTitle sets the "title" field.
func (u *NotificationUpsertBulk) SetTitle(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateTitle() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *NotificationUpsertBulk) SetBody(v string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateBody() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateBody()
	})
}

// SetData sets the "data" field.
func (u *NotificationUpsertBulk) SetData(v map[string]string) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateData() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *NotificationUpsertBulk) ClearData() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.ClearData()
	})
}

// SetSentAt sets the "sent_at" field.
func (u *NotificationUpsertBulk) SetSentAt(v time.Time) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetSentAt(v)
	})
}

// UpdateSentAt sets the "sent_at" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateSentAt() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateSentAt()
	})
}

// SetIsRead sets the "is_read" field.
func (u *NotificationUpsertBulk) SetIsRead(v bool) *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.SetIsRead(v)
	})
}

// UpdateIsRead sets the "is_read" field to the value that was provided on create.
func (u *NotificationUpsertBulk) UpdateIsRead() *NotificationUpsertBulk {
	return u.Update(func(s *NotificationUpsert) {
		s.UpdateIsRead()
	})
}

// Exec executes the query.
func (u *NotificationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotificationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
