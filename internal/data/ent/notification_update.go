// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-firebase/internal/data/ent/notification"
	"go-firebase/internal/data/ent/notificationtopic"
	"go-firebase/internal/data/ent/predicate"
	"go-firebase/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (_u *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationUpdate) SetUpdatedAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *NotificationUpdate) SetUserID(v uuid.UUID) *NotificationUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableUserID(v *uuid.UUID) *NotificationUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *NotificationUpdate) ClearUserID() *NotificationUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (_u *NotificationUpdate) SetNotificationTopicID(v uuid.UUID) *NotificationUpdate {
	_u.mutation.SetNotificationTopicID(v)
	return _u
}

// SetNillableNotificationTopicID sets the "notification_topic_id" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableNotificationTopicID(v *uuid.UUID) *NotificationUpdate {
	if v != nil {
		_u.SetNotificationTopicID(*v)
	}
	return _u
}

// ClearNotificationTopicID clears the value of the "notification_topic_id" field.
func (_u *NotificationUpdate) ClearNotificationTopicID() *NotificationUpdate {
	_u.mutation.ClearNotificationTopicID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *NotificationUpdate) SetTitle(v string) *NotificationUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableTitle(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetBody sets the "body" field.
func (_u *NotificationUpdate) SetBody(v string) *NotificationUpdate {
	_u.mutation.SetBody(v)
	return _u
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableBody(v *string) *NotificationUpdate {
	if v != nil {
		_u.SetBody(*v)
	}
	return _u
}

// SetData sets the "data" field.
func (_u *NotificationUpdate) SetData(v map[string]string) *NotificationUpdate {
	_u.mutation.SetData(v)
	return _u
}

// ClearData clears the value of the "data" field.
func (_u *NotificationUpdate) ClearData() *NotificationUpdate {
	_u.mutation.ClearData()
	return _u
}

// SetSentAt sets the "sent_at" field.
func (_u *NotificationUpdate) SetSentAt(v time.Time) *NotificationUpdate {
	_u.mutation.SetSentAt(v)
	return _u
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableSentAt(v *time.Time) *NotificationUpdate {
	if v != nil {
		_u.SetSentAt(*v)
	}
	return _u
}

// SetIsRead sets the "is_read" field.
func (_u *NotificationUpdate) SetIsRead(v bool) *NotificationUpdate {
	_u.mutation.SetIsRead(v)
	return _u
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (_u *NotificationUpdate) SetNillableIsRead(v *bool) *NotificationUpdate {
	if v != nil {
		_u.SetIsRead(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *NotificationUpdate) SetUser(v *User) *NotificationUpdate {
	return _u.SetUserID(v.ID)
}

// SetNotificationTopic sets the "notification_topic" edge to the NotificationTopic entity.
func (_u *NotificationUpdate) SetNotificationTopic(v *NotificationTopic) *NotificationUpdate {
	return _u.SetNotificationTopicID(v.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (_u *NotificationUpdate) Mutation() *NotificationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *NotificationUpdate) ClearUser() *NotificationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearNotificationTopic clears the "notification_topic" edge to the NotificationTopic entity.
func (_u *NotificationUpdate) ClearNotificationTopic() *NotificationUpdate {
	_u.mutation.ClearNotificationTopic()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *NotificationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Body(); ok {
		_spec.SetField(notification.FieldBody, field.TypeString, value)
	}
	if value, ok := _u.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(notification.FieldData, field.TypeJSON)
	}
	if value, ok := _u.mutation.SentAt(); ok {
		_spec.SetField(notification.FieldSentAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsRead(); ok {
		_spec.SetField(notification.FieldIsRead, field.TypeBool, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationTopicTable,
			Columns: []string{notification.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationTopicTable,
			Columns: []string{notification.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationUpdateOne) SetUpdatedAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *NotificationUpdateOne) SetUserID(v uuid.UUID) *NotificationUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableUserID(v *uuid.UUID) *NotificationUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *NotificationUpdateOne) ClearUserID() *NotificationUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (_u *NotificationUpdateOne) SetNotificationTopicID(v uuid.UUID) *NotificationUpdateOne {
	_u.mutation.SetNotificationTopicID(v)
	return _u
}

// SetNillableNotificationTopicID sets the "notification_topic_id" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableNotificationTopicID(v *uuid.UUID) *NotificationUpdateOne {
	if v != nil {
		_u.SetNotificationTopicID(*v)
	}
	return _u
}

// ClearNotificationTopicID clears the value of the "notification_topic_id" field.
func (_u *NotificationUpdateOne) ClearNotificationTopicID() *NotificationUpdateOne {
	_u.mutation.ClearNotificationTopicID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *NotificationUpdateOne) SetTitle(v string) *NotificationUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableTitle(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetBody sets the "body" field.
func (_u *NotificationUpdateOne) SetBody(v string) *NotificationUpdateOne {
	_u.mutation.SetBody(v)
	return _u
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableBody(v *string) *NotificationUpdateOne {
	if v != nil {
		_u.SetBody(*v)
	}
	return _u
}

// SetData sets the "data" field.
func (_u *NotificationUpdateOne) SetData(v map[string]string) *NotificationUpdateOne {
	_u.mutation.SetData(v)
	return _u
}

// ClearData clears the value of the "data" field.
func (_u *NotificationUpdateOne) ClearData() *NotificationUpdateOne {
	_u.mutation.ClearData()
	return _u
}

// SetSentAt sets the "sent_at" field.
func (_u *NotificationUpdateOne) SetSentAt(v time.Time) *NotificationUpdateOne {
	_u.mutation.SetSentAt(v)
	return _u
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableSentAt(v *time.Time) *NotificationUpdateOne {
	if v != nil {
		_u.SetSentAt(*v)
	}
	return _u
}

// SetIsRead sets the "is_read" field.
func (_u *NotificationUpdateOne) SetIsRead(v bool) *NotificationUpdateOne {
	_u.mutation.SetIsRead(v)
	return _u
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (_u *NotificationUpdateOne) SetNillableIsRead(v *bool) *NotificationUpdateOne {
	if v != nil {
		_u.SetIsRead(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *NotificationUpdateOne) SetUser(v *User) *NotificationUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetNotificationTopic sets the "notification_topic" edge to the NotificationTopic entity.
func (_u *NotificationUpdateOne) SetNotificationTopic(v *NotificationTopic) *NotificationUpdateOne {
	return _u.SetNotificationTopicID(v.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (_u *NotificationUpdateOne) Mutation() *NotificationMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *NotificationUpdateOne) ClearUser() *NotificationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearNotificationTopic clears the "notification_topic" edge to the NotificationTopic entity.
func (_u *NotificationUpdateOne) ClearNotificationTopic() *NotificationUpdateOne {
	_u.mutation.ClearNotificationTopic()
	return _u
}

// Where appends a list predicates to the NotificationUpdate builder.
func (_u *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Notification entity.
func (_u *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Body(); ok {
		_spec.SetField(notification.FieldBody, field.TypeString, value)
	}
	if value, ok := _u.mutation.Data(); ok {
		_spec.SetField(notification.FieldData, field.TypeJSON, value)
	}
	if _u.mutation.DataCleared() {
		_spec.ClearField(notification.FieldData, field.TypeJSON)
	}
	if value, ok := _u.mutation.SentAt(); ok {
		_spec.SetField(notification.FieldSentAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsRead(); ok {
		_spec.SetField(notification.FieldIsRead, field.TypeBool, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.UserTable,
			Columns: []string{notification.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationTopicTable,
			Columns: []string{notification.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.NotificationTopicTable,
			Columns: []string{notification.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
