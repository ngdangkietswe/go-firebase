// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-firebase/internal/data/ent/notificationtopic"
	"go-firebase/internal/data/ent/predicate"
	"go-firebase/internal/data/ent/user"
	"go-firebase/internal/data/ent/usernotificationtopic"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserNotificationTopicUpdate is the builder for updating UserNotificationTopic entities.
type UserNotificationTopicUpdate struct {
	config
	hooks    []Hook
	mutation *UserNotificationTopicMutation
}

// Where appends a list predicates to the UserNotificationTopicUpdate builder.
func (_u *UserNotificationTopicUpdate) Where(ps ...predicate.UserNotificationTopic) *UserNotificationTopicUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserNotificationTopicUpdate) SetUserID(v uuid.UUID) *UserNotificationTopicUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserNotificationTopicUpdate) SetNillableUserID(v *uuid.UUID) *UserNotificationTopicUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (_u *UserNotificationTopicUpdate) SetNotificationTopicID(v uuid.UUID) *UserNotificationTopicUpdate {
	_u.mutation.SetNotificationTopicID(v)
	return _u
}

// SetNillableNotificationTopicID sets the "notification_topic_id" field if the given value is not nil.
func (_u *UserNotificationTopicUpdate) SetNillableNotificationTopicID(v *uuid.UUID) *UserNotificationTopicUpdate {
	if v != nil {
		_u.SetNotificationTopicID(*v)
	}
	return _u
}

// SetSubscribedAt sets the "subscribed_at" field.
func (_u *UserNotificationTopicUpdate) SetSubscribedAt(v time.Time) *UserNotificationTopicUpdate {
	_u.mutation.SetSubscribedAt(v)
	return _u
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (_u *UserNotificationTopicUpdate) SetNillableSubscribedAt(v *time.Time) *UserNotificationTopicUpdate {
	if v != nil {
		_u.SetSubscribedAt(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserNotificationTopicUpdate) SetUser(v *User) *UserNotificationTopicUpdate {
	return _u.SetUserID(v.ID)
}

// SetNotificationTopic sets the "notification_topic" edge to the NotificationTopic entity.
func (_u *UserNotificationTopicUpdate) SetNotificationTopic(v *NotificationTopic) *UserNotificationTopicUpdate {
	return _u.SetNotificationTopicID(v.ID)
}

// Mutation returns the UserNotificationTopicMutation object of the builder.
func (_u *UserNotificationTopicUpdate) Mutation() *UserNotificationTopicMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserNotificationTopicUpdate) ClearUser() *UserNotificationTopicUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearNotificationTopic clears the "notification_topic" edge to the NotificationTopic entity.
func (_u *UserNotificationTopicUpdate) ClearNotificationTopic() *UserNotificationTopicUpdate {
	_u.mutation.ClearNotificationTopic()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserNotificationTopicUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserNotificationTopicUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserNotificationTopicUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserNotificationTopicUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserNotificationTopicUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationTopic.user"`)
	}
	if _u.mutation.NotificationTopicCleared() && len(_u.mutation.NotificationTopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationTopic.notification_topic"`)
	}
	return nil
}

func (_u *UserNotificationTopicUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernotificationtopic.Table, usernotificationtopic.Columns, sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SubscribedAt(); ok {
		_spec.SetField(usernotificationtopic.FieldSubscribedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.UserTable,
			Columns: []string{usernotificationtopic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.UserTable,
			Columns: []string{usernotificationtopic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.NotificationTopicTable,
			Columns: []string{usernotificationtopic.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.NotificationTopicTable,
			Columns: []string{usernotificationtopic.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationtopic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserNotificationTopicUpdateOne is the builder for updating a single UserNotificationTopic entity.
type UserNotificationTopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserNotificationTopicMutation
}

// SetUserID sets the "user_id" field.
func (_u *UserNotificationTopicUpdateOne) SetUserID(v uuid.UUID) *UserNotificationTopicUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserNotificationTopicUpdateOne) SetNillableUserID(v *uuid.UUID) *UserNotificationTopicUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetNotificationTopicID sets the "notification_topic_id" field.
func (_u *UserNotificationTopicUpdateOne) SetNotificationTopicID(v uuid.UUID) *UserNotificationTopicUpdateOne {
	_u.mutation.SetNotificationTopicID(v)
	return _u
}

// SetNillableNotificationTopicID sets the "notification_topic_id" field if the given value is not nil.
func (_u *UserNotificationTopicUpdateOne) SetNillableNotificationTopicID(v *uuid.UUID) *UserNotificationTopicUpdateOne {
	if v != nil {
		_u.SetNotificationTopicID(*v)
	}
	return _u
}

// SetSubscribedAt sets the "subscribed_at" field.
func (_u *UserNotificationTopicUpdateOne) SetSubscribedAt(v time.Time) *UserNotificationTopicUpdateOne {
	_u.mutation.SetSubscribedAt(v)
	return _u
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (_u *UserNotificationTopicUpdateOne) SetNillableSubscribedAt(v *time.Time) *UserNotificationTopicUpdateOne {
	if v != nil {
		_u.SetSubscribedAt(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserNotificationTopicUpdateOne) SetUser(v *User) *UserNotificationTopicUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetNotificationTopic sets the "notification_topic" edge to the NotificationTopic entity.
func (_u *UserNotificationTopicUpdateOne) SetNotificationTopic(v *NotificationTopic) *UserNotificationTopicUpdateOne {
	return _u.SetNotificationTopicID(v.ID)
}

// Mutation returns the UserNotificationTopicMutation object of the builder.
func (_u *UserNotificationTopicUpdateOne) Mutation() *UserNotificationTopicMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserNotificationTopicUpdateOne) ClearUser() *UserNotificationTopicUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearNotificationTopic clears the "notification_topic" edge to the NotificationTopic entity.
func (_u *UserNotificationTopicUpdateOne) ClearNotificationTopic() *UserNotificationTopicUpdateOne {
	_u.mutation.ClearNotificationTopic()
	return _u
}

// Where appends a list predicates to the UserNotificationTopicUpdate builder.
func (_u *UserNotificationTopicUpdateOne) Where(ps ...predicate.UserNotificationTopic) *UserNotificationTopicUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserNotificationTopicUpdateOne) Select(field string, fields ...string) *UserNotificationTopicUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserNotificationTopic entity.
func (_u *UserNotificationTopicUpdateOne) Save(ctx context.Context) (*UserNotificationTopic, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserNotificationTopicUpdateOne) SaveX(ctx context.Context) *UserNotificationTopic {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserNotificationTopicUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserNotificationTopicUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserNotificationTopicUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationTopic.user"`)
	}
	if _u.mutation.NotificationTopicCleared() && len(_u.mutation.NotificationTopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationTopic.notification_topic"`)
	}
	return nil
}

func (_u *UserNotificationTopicUpdateOne) sqlSave(ctx context.Context) (_node *UserNotificationTopic, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernotificationtopic.Table, usernotificationtopic.Columns, sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNotificationTopic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernotificationtopic.FieldID)
		for _, f := range fields {
			if !usernotificationtopic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernotificationtopic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SubscribedAt(); ok {
		_spec.SetField(usernotificationtopic.FieldSubscribedAt, field.TypeTime, value)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.UserTable,
			Columns: []string{usernotificationtopic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.UserTable,
			Columns: []string{usernotificationtopic.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.NotificationTopicTable,
			Columns: []string{usernotificationtopic.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationtopic.NotificationTopicTable,
			Columns: []string{usernotificationtopic.NotificationTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserNotificationTopic{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationtopic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
