// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DeviceTokenColumns holds the columns for the "device_token" table.
	DeviceTokenColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "platform", Type: field.TypeString, Default: "android"},
		{Name: "last_seen", Type: field.TypeTime},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// DeviceTokenTable holds the schema information for the "device_token" table.
	DeviceTokenTable = &schema.Table{
		Name:       "device_token",
		Columns:    DeviceTokenColumns,
		PrimaryKey: []*schema.Column{DeviceTokenColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "device_token_users_device_tokens",
				Columns:    []*schema.Column{DeviceTokenColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NotificationColumns holds the columns for the "notification" table.
	NotificationColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "body", Type: field.TypeString},
		{Name: "data", Type: field.TypeJSON, Nullable: true},
		{Name: "sent_at", Type: field.TypeTime},
		{Name: "is_read", Type: field.TypeBool, Default: false},
		{Name: "notification_topic_id", Type: field.TypeUUID, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID, Nullable: true},
	}
	// NotificationTable holds the schema information for the "notification" table.
	NotificationTable = &schema.Table{
		Name:       "notification",
		Columns:    NotificationColumns,
		PrimaryKey: []*schema.Column{NotificationColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notification_notification_topic_notifications",
				Columns:    []*schema.Column{NotificationColumns[8]},
				RefColumns: []*schema.Column{NotificationTopicColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notification_users_notifications",
				Columns:    []*schema.Column{NotificationColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// NotificationTopicColumns holds the columns for the "notification_topic" table.
	NotificationTopicColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// NotificationTopicTable holds the schema information for the "notification_topic" table.
	NotificationTopicTable = &schema.Table{
		Name:       "notification_topic",
		Columns:    NotificationTopicColumns,
		PrimaryKey: []*schema.Column{NotificationTopicColumns[0]},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "action", Type: field.TypeString},
		{Name: "resource", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "permission_action_resource",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[3], PermissionsColumns[4]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "permission_id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_permissions_role_permissions",
				Columns:    []*schema.Column{RolePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "role_permissions_roles_role_permissions",
				Columns:    []*schema.Column{RolePermissionsColumns[2]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "rolepermission_role_id_permission_id",
				Unique:  false,
				Columns: []*schema.Column{RolePermissionsColumns[2], RolePermissionsColumns[1]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "firebase_uid", Type: field.TypeString, Unique: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserNotificationTopicColumns holds the columns for the "user_notification_topic" table.
	UserNotificationTopicColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "subscribed_at", Type: field.TypeTime},
		{Name: "notification_topic_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// UserNotificationTopicTable holds the schema information for the "user_notification_topic" table.
	UserNotificationTopicTable = &schema.Table{
		Name:       "user_notification_topic",
		Columns:    UserNotificationTopicColumns,
		PrimaryKey: []*schema.Column{UserNotificationTopicColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_notification_topic_notification_topic_user_notification_topics",
				Columns:    []*schema.Column{UserNotificationTopicColumns[2]},
				RefColumns: []*schema.Column{NotificationTopicColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_notification_topic_users_user_notification_topics",
				Columns:    []*schema.Column{UserNotificationTopicColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UserPermissionsColumns holds the columns for the "user_permissions" table.
	UserPermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "permission_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// UserPermissionsTable holds the schema information for the "user_permissions" table.
	UserPermissionsTable = &schema.Table{
		Name:       "user_permissions",
		Columns:    UserPermissionsColumns,
		PrimaryKey: []*schema.Column{UserPermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_permissions_permissions_user_permissions",
				Columns:    []*schema.Column{UserPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_permissions_users_user_permissions",
				Columns:    []*schema.Column{UserPermissionsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userpermission_user_id_permission_id",
				Unique:  false,
				Columns: []*schema.Column{UserPermissionsColumns[2], UserPermissionsColumns[1]},
			},
		},
	}
	// UserRolesColumns holds the columns for the "user_roles" table.
	UserRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// UserRolesTable holds the schema information for the "user_roles" table.
	UserRolesTable = &schema.Table{
		Name:       "user_roles",
		Columns:    UserRolesColumns,
		PrimaryKey: []*schema.Column{UserRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_roles_roles_user_roles",
				Columns:    []*schema.Column{UserRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_roles_users_user_roles",
				Columns:    []*schema.Column{UserRolesColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userrole_user_id_role_id",
				Unique:  false,
				Columns: []*schema.Column{UserRolesColumns[2], UserRolesColumns[1]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DeviceTokenTable,
		NotificationTable,
		NotificationTopicTable,
		PermissionsTable,
		RolesTable,
		RolePermissionsTable,
		UsersTable,
		UserNotificationTopicTable,
		UserPermissionsTable,
		UserRolesTable,
	}
)

func init() {
	DeviceTokenTable.ForeignKeys[0].RefTable = UsersTable
	DeviceTokenTable.Annotation = &entsql.Annotation{
		Table: "device_token",
	}
	NotificationTable.ForeignKeys[0].RefTable = NotificationTopicTable
	NotificationTable.ForeignKeys[1].RefTable = UsersTable
	NotificationTable.Annotation = &entsql.Annotation{
		Table: "notification",
	}
	NotificationTopicTable.Annotation = &entsql.Annotation{
		Table: "notification_topic",
	}
	PermissionsTable.Annotation = &entsql.Annotation{
		Table: "permissions",
	}
	RolesTable.Annotation = &entsql.Annotation{
		Table: "roles",
	}
	RolePermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	RolePermissionsTable.ForeignKeys[1].RefTable = RolesTable
	RolePermissionsTable.Annotation = &entsql.Annotation{
		Table: "role_permissions",
	}
	UsersTable.Annotation = &entsql.Annotation{
		Table: "users",
	}
	UserNotificationTopicTable.ForeignKeys[0].RefTable = NotificationTopicTable
	UserNotificationTopicTable.ForeignKeys[1].RefTable = UsersTable
	UserNotificationTopicTable.Annotation = &entsql.Annotation{
		Table: "user_notification_topic",
	}
	UserPermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	UserPermissionsTable.ForeignKeys[1].RefTable = UsersTable
	UserPermissionsTable.Annotation = &entsql.Annotation{
		Table: "user_permissions",
	}
	UserRolesTable.ForeignKeys[0].RefTable = RolesTable
	UserRolesTable.ForeignKeys[1].RefTable = UsersTable
	UserRolesTable.Annotation = &entsql.Annotation{
		Table: "user_roles",
	}
}
