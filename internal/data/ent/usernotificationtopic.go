// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-firebase/internal/data/ent/notificationtopic"
	"go-firebase/internal/data/ent/user"
	"go-firebase/internal/data/ent/usernotificationtopic"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserNotificationTopic is the model entity for the UserNotificationTopic schema.
type UserNotificationTopic struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// NotificationTopicID holds the value of the "notification_topic_id" field.
	NotificationTopicID uuid.UUID `json:"notification_topic_id,omitempty"`
	// SubscribedAt holds the value of the "subscribed_at" field.
	SubscribedAt time.Time `json:"subscribed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNotificationTopicQuery when eager-loading is set.
	Edges        UserNotificationTopicEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserNotificationTopicEdges holds the relations/edges for other nodes in the graph.
type UserNotificationTopicEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// NotificationTopic holds the value of the notification_topic edge.
	NotificationTopic *NotificationTopic `json:"notification_topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationTopicEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// NotificationTopicOrErr returns the NotificationTopic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationTopicEdges) NotificationTopicOrErr() (*NotificationTopic, error) {
	if e.NotificationTopic != nil {
		return e.NotificationTopic, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: notificationtopic.Label}
	}
	return nil, &NotLoadedError{edge: "notification_topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNotificationTopic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernotificationtopic.FieldSubscribedAt:
			values[i] = new(sql.NullTime)
		case usernotificationtopic.FieldID, usernotificationtopic.FieldUserID, usernotificationtopic.FieldNotificationTopicID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNotificationTopic fields.
func (_m *UserNotificationTopic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernotificationtopic.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case usernotificationtopic.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case usernotificationtopic.FieldNotificationTopicID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field notification_topic_id", values[i])
			} else if value != nil {
				_m.NotificationTopicID = *value
			}
		case usernotificationtopic.FieldSubscribedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscribed_at", values[i])
			} else if value.Valid {
				_m.SubscribedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserNotificationTopic.
// This includes values selected through modifiers, order, etc.
func (_m *UserNotificationTopic) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserNotificationTopic entity.
func (_m *UserNotificationTopic) QueryUser() *UserQuery {
	return NewUserNotificationTopicClient(_m.config).QueryUser(_m)
}

// QueryNotificationTopic queries the "notification_topic" edge of the UserNotificationTopic entity.
func (_m *UserNotificationTopic) QueryNotificationTopic() *NotificationTopicQuery {
	return NewUserNotificationTopicClient(_m.config).QueryNotificationTopic(_m)
}

// Update returns a builder for updating this UserNotificationTopic.
// Note that you need to call UserNotificationTopic.Unwrap() before calling this method if this UserNotificationTopic
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserNotificationTopic) Update() *UserNotificationTopicUpdateOne {
	return NewUserNotificationTopicClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserNotificationTopic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserNotificationTopic) Unwrap() *UserNotificationTopic {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNotificationTopic is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserNotificationTopic) String() string {
	var builder strings.Builder
	builder.WriteString("UserNotificationTopic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("notification_topic_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NotificationTopicID))
	builder.WriteString(", ")
	builder.WriteString("subscribed_at=")
	builder.WriteString(_m.SubscribedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserNotificationTopics is a parsable slice of UserNotificationTopic.
type UserNotificationTopics []*UserNotificationTopic
