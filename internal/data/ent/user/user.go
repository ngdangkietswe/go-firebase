// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldFirebaseUID holds the string denoting the firebase_uid field in the database.
	FieldFirebaseUID = "firebase_uid"
	// EdgeDeviceTokens holds the string denoting the device_tokens edge name in mutations.
	EdgeDeviceTokens = "device_tokens"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeUserNotificationTopics holds the string denoting the user_notification_topics edge name in mutations.
	EdgeUserNotificationTopics = "user_notification_topics"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DeviceTokensTable is the table that holds the device_tokens relation/edge.
	DeviceTokensTable = "device_token"
	// DeviceTokensInverseTable is the table name for the DeviceToken entity.
	// It exists in this package in order to avoid circular dependency with the "devicetoken" package.
	DeviceTokensInverseTable = "device_token"
	// DeviceTokensColumn is the table column denoting the device_tokens relation/edge.
	DeviceTokensColumn = "user_id"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notification"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notification"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "user_id"
	// UserNotificationTopicsTable is the table that holds the user_notification_topics relation/edge.
	UserNotificationTopicsTable = "user_notification_topic"
	// UserNotificationTopicsInverseTable is the table name for the UserNotificationTopic entity.
	// It exists in this package in order to avoid circular dependency with the "usernotificationtopic" package.
	UserNotificationTopicsInverseTable = "user_notification_topic"
	// UserNotificationTopicsColumn is the table column denoting the user_notification_topics relation/edge.
	UserNotificationTopicsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldEmail,
	FieldFirstName,
	FieldLastName,
	FieldDisplayName,
	FieldFirebaseUID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByFirebaseUID orders the results by the firebase_uid field.
func ByFirebaseUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirebaseUID, opts...).ToFunc()
}

// ByDeviceTokensCount orders the results by device_tokens count.
func ByDeviceTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeviceTokensStep(), opts...)
	}
}

// ByDeviceTokens orders the results by device_tokens terms.
func ByDeviceTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserNotificationTopicsCount orders the results by user_notification_topics count.
func ByUserNotificationTopicsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserNotificationTopicsStep(), opts...)
	}
}

// ByUserNotificationTopics orders the results by user_notification_topics terms.
func ByUserNotificationTopics(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserNotificationTopicsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeviceTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeviceTokensTable, DeviceTokensColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
	)
}
func newUserNotificationTopicsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserNotificationTopicsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserNotificationTopicsTable, UserNotificationTopicsColumn),
	)
}
