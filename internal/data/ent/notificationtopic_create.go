// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-firebase/internal/data/ent/notification"
	"go-firebase/internal/data/ent/notificationtopic"
	"go-firebase/internal/data/ent/usernotificationtopic"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NotificationTopicCreate is the builder for creating a NotificationTopic entity.
type NotificationTopicCreate struct {
	config
	mutation *NotificationTopicMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationTopicCreate) SetCreatedAt(v time.Time) *NotificationTopicCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationTopicCreate) SetNillableCreatedAt(v *time.Time) *NotificationTopicCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotificationTopicCreate) SetUpdatedAt(v time.Time) *NotificationTopicCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotificationTopicCreate) SetNillableUpdatedAt(v *time.Time) *NotificationTopicCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *NotificationTopicCreate) SetName(v string) *NotificationTopicCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *NotificationTopicCreate) SetDescription(v string) *NotificationTopicCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *NotificationTopicCreate) SetNillableDescription(v *string) *NotificationTopicCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationTopicCreate) SetID(v uuid.UUID) *NotificationTopicCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *NotificationTopicCreate) SetNillableID(v *uuid.UUID) *NotificationTopicCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddUserNotificationTopicIDs adds the "user_notification_topics" edge to the UserNotificationTopic entity by IDs.
func (_c *NotificationTopicCreate) AddUserNotificationTopicIDs(ids ...uuid.UUID) *NotificationTopicCreate {
	_c.mutation.AddUserNotificationTopicIDs(ids...)
	return _c
}

// AddUserNotificationTopics adds the "user_notification_topics" edges to the UserNotificationTopic entity.
func (_c *NotificationTopicCreate) AddUserNotificationTopics(v ...*UserNotificationTopic) *NotificationTopicCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserNotificationTopicIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_c *NotificationTopicCreate) AddNotificationIDs(ids ...uuid.UUID) *NotificationTopicCreate {
	_c.mutation.AddNotificationIDs(ids...)
	return _c
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_c *NotificationTopicCreate) AddNotifications(v ...*Notification) *NotificationTopicCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNotificationIDs(ids...)
}

// Mutation returns the NotificationTopicMutation object of the builder.
func (_c *NotificationTopicCreate) Mutation() *NotificationTopicMutation {
	return _c.mutation
}

// Save creates the NotificationTopic in the database.
func (_c *NotificationTopicCreate) Save(ctx context.Context) (*NotificationTopic, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationTopicCreate) SaveX(ctx context.Context) *NotificationTopic {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationTopicCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationTopicCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotificationTopicCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := notificationtopic.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := notificationtopic.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := notificationtopic.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationTopicCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotificationTopic.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotificationTopic.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "NotificationTopic.name"`)}
	}
	return nil
}

func (_c *NotificationTopicCreate) sqlSave(ctx context.Context) (*NotificationTopic, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationTopicCreate) createSpec() (*NotificationTopic, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationTopic{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notificationtopic.Table, sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notificationtopic.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtopic.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(notificationtopic.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(notificationtopic.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := _c.mutation.UserNotificationTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationTopic.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationTopicUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationTopicCreate) OnConflict(opts ...sql.ConflictOption) *NotificationTopicUpsertOne {
	_c.conflict = opts
	return &NotificationTopicUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationTopic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationTopicCreate) OnConflictColumns(columns ...string) *NotificationTopicUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationTopicUpsertOne{
		create: _c,
	}
}

type (
	// NotificationTopicUpsertOne is the builder for "upsert"-ing
	//  one NotificationTopic node.
	NotificationTopicUpsertOne struct {
		create *NotificationTopicCreate
	}

	// NotificationTopicUpsert is the "OnConflict" setter.
	NotificationTopicUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationTopicUpsert) SetUpdatedAt(v time.Time) *NotificationTopicUpsert {
	u.Set(notificationtopic.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationTopicUpsert) UpdateUpdatedAt() *NotificationTopicUpsert {
	u.SetExcluded(notificationtopic.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *NotificationTopicUpsert) SetName(v string) *NotificationTopicUpsert {
	u.Set(notificationtopic.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationTopicUpsert) UpdateName() *NotificationTopicUpsert {
	u.SetExcluded(notificationtopic.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *NotificationTopicUpsert) SetDescription(v string) *NotificationTopicUpsert {
	u.Set(notificationtopic.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationTopicUpsert) UpdateDescription() *NotificationTopicUpsert {
	u.SetExcluded(notificationtopic.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationTopicUpsert) ClearDescription() *NotificationTopicUpsert {
	u.SetNull(notificationtopic.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationTopic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationtopic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationTopicUpsertOne) UpdateNewValues() *NotificationTopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationtopic.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationtopic.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationTopic.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationTopicUpsertOne) Ignore() *NotificationTopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationTopicUpsertOne) DoNothing() *NotificationTopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationTopicCreate.OnConflict
// documentation for more info.
func (u *NotificationTopicUpsertOne) Update(set func(*NotificationTopicUpsert)) *NotificationTopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationTopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationTopicUpsertOne) SetUpdatedAt(v time.Time) *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationTopicUpsertOne) UpdateUpdatedAt() *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *NotificationTopicUpsertOne) SetName(v string) *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationTopicUpsertOne) UpdateName() *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NotificationTopicUpsertOne) SetDescription(v string) *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationTopicUpsertOne) UpdateDescription() *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationTopicUpsertOne) ClearDescription() *NotificationTopicUpsertOne {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *NotificationTopicUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationTopicCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationTopicUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationTopicUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NotificationTopicUpsertOne.ID is not supported by MySQL driver. Use NotificationTopicUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationTopicUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationTopicCreateBulk is the builder for creating many NotificationTopic entities in bulk.
type NotificationTopicCreateBulk struct {
	config
	err      error
	builders []*NotificationTopicCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationTopic entities in the database.
func (_c *NotificationTopicCreateBulk) Save(ctx context.Context) ([]*NotificationTopic, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NotificationTopic, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationTopicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationTopicCreateBulk) SaveX(ctx context.Context) []*NotificationTopic {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationTopicCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationTopicCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationTopic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationTopicUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationTopicCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationTopicUpsertBulk {
	_c.conflict = opts
	return &NotificationTopicUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationTopic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationTopicCreateBulk) OnConflictColumns(columns ...string) *NotificationTopicUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationTopicUpsertBulk{
		create: _c,
	}
}

// NotificationTopicUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationTopic nodes.
type NotificationTopicUpsertBulk struct {
	create *NotificationTopicCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationTopic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationtopic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationTopicUpsertBulk) UpdateNewValues() *NotificationTopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationtopic.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationtopic.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationTopic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationTopicUpsertBulk) Ignore() *NotificationTopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationTopicUpsertBulk) DoNothing() *NotificationTopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationTopicCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationTopicUpsertBulk) Update(set func(*NotificationTopicUpsert)) *NotificationTopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationTopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationTopicUpsertBulk) SetUpdatedAt(v time.Time) *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationTopicUpsertBulk) UpdateUpdatedAt() *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *NotificationTopicUpsertBulk) SetName(v string) *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationTopicUpsertBulk) UpdateName() *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NotificationTopicUpsertBulk) SetDescription(v string) *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationTopicUpsertBulk) UpdateDescription() *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationTopicUpsertBulk) ClearDescription() *NotificationTopicUpsertBulk {
	return u.Update(func(s *NotificationTopicUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *NotificationTopicUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotificationTopicCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationTopicCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationTopicUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
