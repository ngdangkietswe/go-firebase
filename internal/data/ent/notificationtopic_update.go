// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-firebase/internal/data/ent/notification"
	"go-firebase/internal/data/ent/notificationtopic"
	"go-firebase/internal/data/ent/predicate"
	"go-firebase/internal/data/ent/usernotificationtopic"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NotificationTopicUpdate is the builder for updating NotificationTopic entities.
type NotificationTopicUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationTopicMutation
}

// Where appends a list predicates to the NotificationTopicUpdate builder.
func (_u *NotificationTopicUpdate) Where(ps ...predicate.NotificationTopic) *NotificationTopicUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationTopicUpdate) SetUpdatedAt(v time.Time) *NotificationTopicUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationTopicUpdate) SetName(v string) *NotificationTopicUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationTopicUpdate) SetNillableName(v *string) *NotificationTopicUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *NotificationTopicUpdate) SetDescription(v string) *NotificationTopicUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *NotificationTopicUpdate) SetNillableDescription(v *string) *NotificationTopicUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *NotificationTopicUpdate) ClearDescription() *NotificationTopicUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// AddUserNotificationTopicIDs adds the "user_notification_topics" edge to the UserNotificationTopic entity by IDs.
func (_u *NotificationTopicUpdate) AddUserNotificationTopicIDs(ids ...uuid.UUID) *NotificationTopicUpdate {
	_u.mutation.AddUserNotificationTopicIDs(ids...)
	return _u
}

// AddUserNotificationTopics adds the "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *NotificationTopicUpdate) AddUserNotificationTopics(v ...*UserNotificationTopic) *NotificationTopicUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserNotificationTopicIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_u *NotificationTopicUpdate) AddNotificationIDs(ids ...uuid.UUID) *NotificationTopicUpdate {
	_u.mutation.AddNotificationIDs(ids...)
	return _u
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_u *NotificationTopicUpdate) AddNotifications(v ...*Notification) *NotificationTopicUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNotificationIDs(ids...)
}

// Mutation returns the NotificationTopicMutation object of the builder.
func (_u *NotificationTopicUpdate) Mutation() *NotificationTopicMutation {
	return _u.mutation
}

// ClearUserNotificationTopics clears all "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *NotificationTopicUpdate) ClearUserNotificationTopics() *NotificationTopicUpdate {
	_u.mutation.ClearUserNotificationTopics()
	return _u
}

// RemoveUserNotificationTopicIDs removes the "user_notification_topics" edge to UserNotificationTopic entities by IDs.
func (_u *NotificationTopicUpdate) RemoveUserNotificationTopicIDs(ids ...uuid.UUID) *NotificationTopicUpdate {
	_u.mutation.RemoveUserNotificationTopicIDs(ids...)
	return _u
}

// RemoveUserNotificationTopics removes "user_notification_topics" edges to UserNotificationTopic entities.
func (_u *NotificationTopicUpdate) RemoveUserNotificationTopics(v ...*UserNotificationTopic) *NotificationTopicUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserNotificationTopicIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (_u *NotificationTopicUpdate) ClearNotifications() *NotificationTopicUpdate {
	_u.mutation.ClearNotifications()
	return _u
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (_u *NotificationTopicUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *NotificationTopicUpdate {
	_u.mutation.RemoveNotificationIDs(ids...)
	return _u
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (_u *NotificationTopicUpdate) RemoveNotifications(v ...*Notification) *NotificationTopicUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationTopicUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationTopicUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationTopicUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationTopicUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationTopicUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationtopic.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *NotificationTopicUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationtopic.Table, notificationtopic.Columns, sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtopic.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationtopic.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(notificationtopic.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(notificationtopic.FieldDescription, field.TypeString)
	}
	if _u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserNotificationTopicsIDs(); len(nodes) > 0 && !_u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserNotificationTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !_u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtopic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationTopicUpdateOne is the builder for updating a single NotificationTopic entity.
type NotificationTopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationTopicMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationTopicUpdateOne) SetUpdatedAt(v time.Time) *NotificationTopicUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationTopicUpdateOne) SetName(v string) *NotificationTopicUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationTopicUpdateOne) SetNillableName(v *string) *NotificationTopicUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *NotificationTopicUpdateOne) SetDescription(v string) *NotificationTopicUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *NotificationTopicUpdateOne) SetNillableDescription(v *string) *NotificationTopicUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *NotificationTopicUpdateOne) ClearDescription() *NotificationTopicUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// AddUserNotificationTopicIDs adds the "user_notification_topics" edge to the UserNotificationTopic entity by IDs.
func (_u *NotificationTopicUpdateOne) AddUserNotificationTopicIDs(ids ...uuid.UUID) *NotificationTopicUpdateOne {
	_u.mutation.AddUserNotificationTopicIDs(ids...)
	return _u
}

// AddUserNotificationTopics adds the "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *NotificationTopicUpdateOne) AddUserNotificationTopics(v ...*UserNotificationTopic) *NotificationTopicUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserNotificationTopicIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (_u *NotificationTopicUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *NotificationTopicUpdateOne {
	_u.mutation.AddNotificationIDs(ids...)
	return _u
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (_u *NotificationTopicUpdateOne) AddNotifications(v ...*Notification) *NotificationTopicUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNotificationIDs(ids...)
}

// Mutation returns the NotificationTopicMutation object of the builder.
func (_u *NotificationTopicUpdateOne) Mutation() *NotificationTopicMutation {
	return _u.mutation
}

// ClearUserNotificationTopics clears all "user_notification_topics" edges to the UserNotificationTopic entity.
func (_u *NotificationTopicUpdateOne) ClearUserNotificationTopics() *NotificationTopicUpdateOne {
	_u.mutation.ClearUserNotificationTopics()
	return _u
}

// RemoveUserNotificationTopicIDs removes the "user_notification_topics" edge to UserNotificationTopic entities by IDs.
func (_u *NotificationTopicUpdateOne) RemoveUserNotificationTopicIDs(ids ...uuid.UUID) *NotificationTopicUpdateOne {
	_u.mutation.RemoveUserNotificationTopicIDs(ids...)
	return _u
}

// RemoveUserNotificationTopics removes "user_notification_topics" edges to UserNotificationTopic entities.
func (_u *NotificationTopicUpdateOne) RemoveUserNotificationTopics(v ...*UserNotificationTopic) *NotificationTopicUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserNotificationTopicIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (_u *NotificationTopicUpdateOne) ClearNotifications() *NotificationTopicUpdateOne {
	_u.mutation.ClearNotifications()
	return _u
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (_u *NotificationTopicUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *NotificationTopicUpdateOne {
	_u.mutation.RemoveNotificationIDs(ids...)
	return _u
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (_u *NotificationTopicUpdateOne) RemoveNotifications(v ...*Notification) *NotificationTopicUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the NotificationTopicUpdate builder.
func (_u *NotificationTopicUpdateOne) Where(ps ...predicate.NotificationTopic) *NotificationTopicUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationTopicUpdateOne) Select(field string, fields ...string) *NotificationTopicUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationTopic entity.
func (_u *NotificationTopicUpdateOne) Save(ctx context.Context) (*NotificationTopic, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationTopicUpdateOne) SaveX(ctx context.Context) *NotificationTopic {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationTopicUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationTopicUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationTopicUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationtopic.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *NotificationTopicUpdateOne) sqlSave(ctx context.Context) (_node *NotificationTopic, err error) {
	_spec := sqlgraph.NewUpdateSpec(notificationtopic.Table, notificationtopic.Columns, sqlgraph.NewFieldSpec(notificationtopic.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationTopic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationtopic.FieldID)
		for _, f := range fields {
			if !notificationtopic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationtopic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtopic.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationtopic.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(notificationtopic.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(notificationtopic.FieldDescription, field.TypeString)
	}
	if _u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserNotificationTopicsIDs(); len(nodes) > 0 && !_u.mutation.UserNotificationTopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserNotificationTopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.UserNotificationTopicsTable,
			Columns: []string{notificationtopic.UserNotificationTopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationtopic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !_u.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtopic.NotificationsTable,
			Columns: []string{notificationtopic.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NotificationTopic{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtopic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
